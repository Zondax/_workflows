name: Cloud Run Rollback Canary (Reusable)

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Environment name (dev/pro)"
      service_name:
        required: true
        type: string
        description: "Cloud Run service name"
      cleanup_canary_revision:
        required: false
        type: boolean
        default: true
        description: "Whether to delete the canary revision after rollback"
    outputs:
      service_url:
        description: "The Cloud Run service URL"
        value: ${{ jobs.rollback-canary.outputs.service_url }}
      rollback_revision:
        description: "The revision that traffic was rolled back to"
        value: ${{ jobs.rollback-canary.outputs.rollback_revision }}

jobs:
  rollback-canary:
    runs-on: zondax-runners
    environment: ${{ inputs.environment }}
    outputs:
      service_url: ${{ steps.get-info.outputs.service_url }}
      rollback_revision: ${{ steps.get-info.outputs.rollback_revision }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Environment Logging
        run: |
          echo "🚨 EMERGENCY CANARY ROLLBACK"
          echo "Environment: ${{ inputs.environment }}"
          echo "Service: ${{ inputs.service_name }}"
          echo "Cleanup canary: ${{ inputs.cleanup_canary_revision }}"
          echo "Region: ${{ vars.PULUMI_GAR_LOCATION }}"
          echo "Project: ${{ vars.PULUMI_GCP_PROJECT_ID }}"

      - name: Authenticate with GCP
        uses: zondax/actions/gcp-wif-auth@v1
        with:
          workload_identity_provider: ${{ vars.PULUMI_DEPLOY_WIF_PROVIDER }}
          project_id: ${{ vars.PULUMI_GCP_PROJECT_ID }}

      - name: Validate service exists
        run: |
          # Check if service exists
          if ! gcloud run services describe ${{ inputs.service_name }} \
            --region=${{ vars.PULUMI_GAR_LOCATION }} \
            --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
            --quiet >/dev/null 2>&1; then
            echo "ERROR: Service ${{ inputs.service_name }} does not exist"
            exit 1
          fi

      - name: Check current canary status
        id: current-status
        run: |
          echo "Current traffic allocation (before rollback):"
          gcloud run services describe ${{ inputs.service_name }} \
            --region=${{ vars.PULUMI_GAR_LOCATION }} \
            --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
            --format='table(spec.traffic[].revisionName,spec.traffic[].percent,spec.traffic[].tag,spec.traffic[].url)'
          
          # Check if there's a canary deployment
          CANARY_COUNT=$(gcloud run services describe ${{ inputs.service_name }} \
            --region=${{ vars.PULUMI_GAR_LOCATION }} \
            --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
            --format='value(spec.traffic[].tag)' | grep -c "canary" || true)
          
          if [ "$CANARY_COUNT" -eq 0 ]; then
            echo "WARNING: No canary deployment found for service ${{ inputs.service_name }}"
            echo "Checking if there are multiple revisions with traffic..."
            
            # Count revisions with traffic > 0
            TRAFFIC_REVISIONS=$(gcloud run services describe ${{ inputs.service_name }} \
              --region=${{ vars.PULUMI_GAR_LOCATION }} \
              --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
              --format='value(spec.traffic[].percent)' | grep -v '^0$' | wc -l)
            
            if [ "$TRAFFIC_REVISIONS" -le 1 ]; then
              echo "INFO: Only one revision has traffic. Nothing to rollback."
              echo "Service is already in a stable state."
              exit 0
            else
              echo "INFO: Multiple revisions found with traffic. Will rollback to stable."
            fi
          fi
          
          # Get current canary traffic percentage
          CURRENT_CANARY_TRAFFIC=$(gcloud run services describe ${{ inputs.service_name }} \
            --region=${{ vars.PULUMI_GAR_LOCATION }} \
            --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
            --format='value(spec.traffic[].percent)' \
            --filter='spec.traffic[].tag:canary' || echo "0")
          
          echo "current_canary_traffic=$CURRENT_CANARY_TRAFFIC" >> $GITHUB_OUTPUT
          
          echo "Canary currently has: ${CURRENT_CANARY_TRAFFIC}% traffic"

      - name: Get revision information
        id: revisions
        run: |
          # Get canary revision (tagged as 'canary') if it exists
          CANARY_REVISION=$(gcloud run services describe ${{ inputs.service_name }} \
            --region=${{ vars.PULUMI_GAR_LOCATION }} \
            --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
            --format='value(spec.traffic[].revisionName)' \
            --filter='spec.traffic[].tag:canary' || echo "")
          
          # Get stable revision (tagged as 'stable')
          STABLE_REVISION=$(gcloud run services describe ${{ inputs.service_name }} \
            --region=${{ vars.PULUMI_GAR_LOCATION }} \
            --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
            --format='value(spec.traffic[].revisionName)' \
            --filter='spec.traffic[].tag:stable' || echo "")
          
          # If no stable tag, get the revision with highest traffic that's not canary
          if [ -z "$STABLE_REVISION" ] || [ "$STABLE_REVISION" = "null" ]; then
            echo "No stable tag found, finding revision with highest traffic (not canary)..."
            STABLE_REVISION=$(gcloud run services describe ${{ inputs.service_name }} \
              --region=${{ vars.PULUMI_GAR_LOCATION }} \
              --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
              --format='table(spec.traffic[].revisionName,spec.traffic[].percent,spec.traffic[].tag)' \
              --sort-by='~spec.traffic[].percent' | grep -v canary | head -1 | awk '{print $1}')
          fi
          
          if [ -z "$STABLE_REVISION" ] || [ "$STABLE_REVISION" = "null" ]; then
            echo "ERROR: Could not find a stable revision to rollback to"
            echo "Available revisions:"
            gcloud run revisions list \
              --service=${{ inputs.service_name }} \
              --region=${{ vars.PULUMI_GAR_LOCATION }} \
              --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
              --limit=5
            exit 1
          fi
          
          echo "canary_revision=$CANARY_REVISION" >> $GITHUB_OUTPUT
          echo "stable_revision=$STABLE_REVISION" >> $GITHUB_OUTPUT
          
          echo "Found revisions:"
          echo "  Canary (will be rolled back): $CANARY_REVISION"
          echo "  Stable (rollback target): $STABLE_REVISION"

      - name: Execute emergency rollback
        id: rollback
        run: |
          STABLE_REVISION="${{ steps.revisions.outputs.stable_revision }}"
          CANARY_REVISION="${{ steps.revisions.outputs.canary_revision }}"
          
          echo "🚨 EXECUTING EMERGENCY ROLLBACK"
          echo "Rolling back to stable revision: $STABLE_REVISION"
          
          # Immediately switch 100% traffic to stable revision
          gcloud run services update-traffic ${{ inputs.service_name }} \
            --to-revisions="$STABLE_REVISION=100" \
            --region=${{ vars.PULUMI_GAR_LOCATION }} \
            --project=${{ vars.PULUMI_GCP_PROJECT_ID }}
          
          # Remove canary tag if it exists
          if [ -n "$CANARY_REVISION" ] && [ "$CANARY_REVISION" != "null" ]; then
            gcloud run services update-traffic ${{ inputs.service_name }} \
              --remove-tags=canary \
              --region=${{ vars.PULUMI_GAR_LOCATION }} \
              --project=${{ vars.PULUMI_GCP_PROJECT_ID }} || echo "Could not remove canary tag (may not exist)"
          fi
          
          # Ensure stable tag is set
          gcloud run services update-traffic ${{ inputs.service_name }} \
            --set-tags=stable="$STABLE_REVISION" \
            --region=${{ vars.PULUMI_GAR_LOCATION }} \
            --project=${{ vars.PULUMI_GCP_PROJECT_ID }}
          
          echo "✅ Emergency rollback completed!"

      - name: Cleanup canary revision
        if: inputs.cleanup_canary_revision == true
        run: |
          CANARY_REVISION="${{ steps.revisions.outputs.canary_revision }}"
          
          if [ -n "$CANARY_REVISION" ] && [ "$CANARY_REVISION" != "null" ]; then
            echo "Cleaning up canary revision: $CANARY_REVISION"
            
            # Wait a moment for traffic changes to propagate
            sleep 10
            
            # Delete canary revision
            gcloud run revisions delete "$CANARY_REVISION" \
              --region=${{ vars.PULUMI_GAR_LOCATION }} \
              --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
              --quiet || echo "Could not delete canary revision (may still be serving traffic)"
            
            echo "✅ Canary revision cleanup completed"
          else
            echo "No canary revision to cleanup"
          fi

      - name: Verify rollback
        run: |
          echo "Verifying rollback state..."
          sleep 5  # Give it a moment to propagate
          
          echo "Traffic allocation after rollback:"
          gcloud run services describe ${{ inputs.service_name }} \
            --region=${{ vars.PULUMI_GAR_LOCATION }} \
            --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
            --format='table(spec.traffic[].revisionName,spec.traffic[].percent,spec.traffic[].tag,spec.traffic[].url)'
          
          # Verify 100% traffic to stable
          STABLE_TRAFFIC=$(gcloud run services describe ${{ inputs.service_name }} \
            --region=${{ vars.PULUMI_GAR_LOCATION }} \
            --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
            --format='value(spec.traffic[].percent)' \
            --filter='spec.traffic[].tag:stable')
          
          if [ "$STABLE_TRAFFIC" != "100" ]; then
            echo "WARNING: Expected 100% traffic to stable but got ${STABLE_TRAFFIC}%"
          else
            echo "✅ Rollback verified: 100% traffic to stable revision"
          fi
          
          # Verify no canary tag exists
          CANARY_COUNT=$(gcloud run services describe ${{ inputs.service_name }} \
            --region=${{ vars.PULUMI_GAR_LOCATION }} \
            --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
            --format='value(spec.traffic[].tag)' | grep -c "canary" || true)
          
          if [ "$CANARY_COUNT" -gt 0 ]; then
            echo "WARNING: Canary tag still exists after rollback"
          else
            echo "✅ Verified: No canary tags remaining"
          fi

      - name: Health check after rollback
        run: |
          echo "Performing health check after rollback..."
          
          # Get service URL
          SERVICE_URL=$(gcloud run services describe ${{ inputs.service_name }} \
            --region=${{ vars.PULUMI_GAR_LOCATION }} \
            --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
            --format='value(status.url)')
          
          echo "Service URL: $SERVICE_URL"
          
          # Simple health check (if service is publicly accessible)
          if curl -f -s --max-time 10 "$SERVICE_URL/healthz" >/dev/null 2>&1; then
            echo "✅ Service health check passed"
          elif curl -f -s --max-time 10 "$SERVICE_URL" >/dev/null 2>&1; then
            echo "✅ Service is responding"
          else
            echo "⚠️  Could not verify service health (may require authentication)"
          fi

      - name: Get deployment info
        id: get-info
        run: |
          # Get service URL
          SERVICE_URL=$(gcloud run services describe ${{ inputs.service_name }} \
            --region=${{ vars.PULUMI_GAR_LOCATION }} \
            --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
            --format='value(status.url)')
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          
          # Get rollback revision
          ROLLBACK_REVISION=$(gcloud run services describe ${{ inputs.service_name }} \
            --region=${{ vars.PULUMI_GAR_LOCATION }} \
            --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
            --format='value(spec.traffic[].revisionName)' \
            --filter='spec.traffic[].tag:stable')
          echo "rollback_revision=$ROLLBACK_REVISION" >> $GITHUB_OUTPUT
          
          echo "=== EMERGENCY ROLLBACK SUMMARY ==="
          echo "Service URL: $SERVICE_URL"
          echo "Rolled back to revision: $ROLLBACK_REVISION"
          echo "Previous canary traffic: ${{ steps.current-status.outputs.current_canary_traffic }}%"
          echo "Current traffic: 100% to stable"
          echo "Canary revision cleanup: ${{ inputs.cleanup_canary_revision }}"
          echo "Final traffic allocation:"
          gcloud run services describe ${{ inputs.service_name }} \
            --region=${{ vars.PULUMI_GAR_LOCATION }} \
            --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
            --format='table(spec.traffic[].revisionName,spec.traffic[].percent,spec.traffic[].tag)'
          echo "===================================="
          
          echo "🚨 Emergency rollback completed successfully!"
          echo "✅ All traffic restored to stable revision"
          echo "🏷️  Service tagged as 'stable' and ready for future deployments"
          echo "🧹 Canary revision cleaned up (if enabled)"
          echo ""
          echo "🔍 Next steps:"
          echo "   1. Investigate the issues that caused the rollback"
          echo "   2. Fix the problems in your code"
          echo "   3. Deploy a new version when ready"