name: Cloud Run Deploy (Reusable)

on:
  workflow_call:
    inputs:
      service_name:
        required: false
        type: string
        description: Name of the Cloud Run service
      gcp_project_id:
        required: true
        type: string
        description: GCP project ID
      image_tag:
        required: true
        type: string
        description: Full image tag to deploy
      region:
        required: true
        type: string
        description: GCP region for Cloud Run
      allow_unauth:
        required: false
        type: boolean
        default: true
        description: Whether to allow unauthenticated access
      config_file:
        required: false
        type: string
        description: Path to the configuration file for this deployment
      workload_identity_provider:
        required: true
        type: string
        description: Workload identity provider
      service_account:
        required: true
        type: string
    outputs:
      url:
        description: "The deployed Cloud Run service URL."
        value: ${{ jobs.deploy.outputs.url }}
jobs:
  deploy:
    runs-on: zondax-runners
    outputs:
      url: ${{ steps.get-url.outputs.url }}
    permissions:
      id-token: write # Enables automatic ID token injection for google-github-actions/auth
      contents: read # Required for actions/checkout and GitHub API access
      pull-requests: write # Required for commenting on PRs
    steps:
      - uses: actions/checkout@v4
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ inputs.workload_identity_provider }}
          service_account: ${{ inputs.service_account }}
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        
      - name: Install go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24

      - name: Install yq
        run: |
          go install github.com/mikefarah/yq/v4@latest
          
      - name: Read config file
        id: read-config
        if: inputs.config_file != ''
        run: |
          echo "Reading configuration from ${{ inputs.config_file }}"
          if [ -f "${{ inputs.config_file }}" ]; then
            SERVICE_NAME=$(yq '.service.name' ${{ inputs.config_file }})
            MEMORY=$(yq '.service.memory' ${{ inputs.config_file }})
            CPU=$(yq '.service.cpu' ${{ inputs.config_file }})
            CONCURRENCY=$(yq '.service.concurrency' ${{ inputs.config_file }})
            TIMEOUT=$(yq '.service.timeout' ${{ inputs.config_file }})
            MIN_INSTANCES=$(yq '.service.min_instances' ${{ inputs.config_file }})
            MAX_INSTANCES=$(yq '.service.max_instances' ${{ inputs.config_file }})
            ALLOW_UNAUTH=$(yq '.service.allow_unauthenticated' ${{ inputs.config_file }})
            VPC_CONNECTOR=$(yq '.service.vpc_connector' ${{ inputs.config_file }})
            PORT=$(yq '.service.port // ""' ${{ inputs.config_file }})
            
            # Build environment variables flags
            ENV_VARS="--set-env-vars="
            for key in $(yq '.service.environment_variables | keys | .[]' ${{ inputs.config_file }}); do
              value=$(yq ".service.environment_variables.$key" ${{ inputs.config_file }})
              ENV_VARS="$ENV_VARS$key=$value,"
            done

            ENV_VARS=${ENV_VARS%,}

            # Parse command and args as comma-separated and space-separated strings
            COMMAND=$(yq -o=json '.service.command // []' ${{ inputs.config_file }} | jq -r 'join(",")')
            ARGS=$(yq -o=json '.service.args // []' ${{ inputs.config_file }} | jq -r 'join(" ")')

            # Parse app_config_file and base64 encode if present
            APP_CONFIG_FILE=$(yq '.service.app_config_file // ""' ${{ inputs.config_file }})
            if [ "$APP_CONFIG_FILE" != "" ]; then
              APP_CONFIG_FILE_B64=$(echo "$APP_CONFIG_FILE" | base64 | tr -d '\n')
              echo "app_config_file_b64=$APP_CONFIG_FILE_B64" >> $GITHUB_OUTPUT
            fi

            # Parse health check config for startup and liveness probes
            STARTUP_PROBE_FLAG=""
            LIVENESS_PROBE_FLAG=""
            # Startup probe
            STARTUP=$(yq '.service.health_check.startup // ""' ${{ inputs.config_file }})
            if [ "$STARTUP" != "" ]; then
              PROBE_TYPE=$(yq '.service.health_check.startup.type' ${{ inputs.config_file }})
              if [ "$PROBE_TYPE" = "grpc" ]; then
                PROBE_PORT=$(yq '.service.health_check.startup.port' ${{ inputs.config_file }})
                PROBE_SERVICE=$(yq '.service.health_check.startup.service // ""' ${{ inputs.config_file }})
                PROBE_DELAY=$(yq '.service.health_check.startup.initial_delay_seconds // 0' ${{ inputs.config_file }})
                PROBE_PERIOD=$(yq '.service.health_check.startup.period_seconds // 10' ${{ inputs.config_file }})
                PROBE_TIMEOUT=$(yq '.service.health_check.startup.timeout_seconds // 1' ${{ inputs.config_file }})
                PROBE_FAILURE=$(yq '.service.health_check.startup.failure_threshold // 3' ${{ inputs.config_file }})
                STARTUP_PROBE_FLAG="--startup-probe grpc.port=$PROBE_PORT,grpc.service=$PROBE_SERVICE,initialDelaySeconds=$PROBE_DELAY,periodSeconds=$PROBE_PERIOD,timeoutSeconds=$PROBE_TIMEOUT,failureThreshold=$PROBE_FAILURE"
              elif [ "$PROBE_TYPE" = "http" ]; then
                PROBE_PATH=$(yq '.service.health_check.startup.path' ${{ inputs.config_file }})
                PROBE_PORT=$(yq '.service.health_check.startup.port' ${{ inputs.config_file }})
                PROBE_DELAY=$(yq '.service.health_check.startup.initial_delay_seconds // 0' ${{ inputs.config_file }})
                PROBE_PERIOD=$(yq '.service.health_check.startup.period_seconds // 10' ${{ inputs.config_file }})
                PROBE_TIMEOUT=$(yq '.service.health_check.startup.timeout_seconds // 1' ${{ inputs.config_file }})
                PROBE_FAILURE=$(yq '.service.health_check.startup.failure_threshold // 3' ${{ inputs.config_file }})
                STARTUP_PROBE_FLAG="--startup-probe httpGet.path=$PROBE_PATH,httpGet.port=$PROBE_PORT,initialDelaySeconds=$PROBE_DELAY,periodSeconds=$PROBE_PERIOD,timeoutSeconds=$PROBE_TIMEOUT,failureThreshold=$PROBE_FAILURE"
              fi
              echo "startup_probe_flag=$STARTUP_PROBE_FLAG" >> $GITHUB_OUTPUT
            fi
            # Liveness probe
            LIVENESS=$(yq '.service.health_check.liveness // ""' ${{ inputs.config_file }})
            if [ "$LIVENESS" != "" ]; then
              PROBE_TYPE=$(yq '.service.health_check.liveness.type' ${{ inputs.config_file }})
              if [ "$PROBE_TYPE" = "grpc" ]; then
                PROBE_PORT=$(yq '.service.health_check.liveness.port' ${{ inputs.config_file }})
                PROBE_SERVICE=$(yq '.service.health_check.liveness.service // ""' ${{ inputs.config_file }})
                PROBE_DELAY=$(yq '.service.health_check.liveness.initial_delay_seconds // 0' ${{ inputs.config_file }})
                PROBE_PERIOD=$(yq '.service.health_check.liveness.period_seconds // 10' ${{ inputs.config_file }})
                PROBE_TIMEOUT=$(yq '.service.health_check.liveness.timeout_seconds // 1' ${{ inputs.config_file }})
                PROBE_FAILURE=$(yq '.service.health_check.liveness.failure_threshold // 3' ${{ inputs.config_file }})
                LIVENESS_PROBE_FLAG="--liveness-probe grpc.port=$PROBE_PORT,grpc.service=$PROBE_SERVICE,initialDelaySeconds=$PROBE_DELAY,periodSeconds=$PROBE_PERIOD,timeoutSeconds=$PROBE_TIMEOUT,failureThreshold=$PROBE_FAILURE"
              elif [ "$PROBE_TYPE" = "http" ]; then
                PROBE_PATH=$(yq '.service.health_check.liveness.path' ${{ inputs.config_file }})
                PROBE_PORT=$(yq '.service.health_check.liveness.port' ${{ inputs.config_file }})
                PROBE_DELAY=$(yq '.service.health_check.liveness.initial_delay_seconds // 0' ${{ inputs.config_file }})
                PROBE_PERIOD=$(yq '.service.health_check.liveness.period_seconds // 10' ${{ inputs.config_file }})
                PROBE_TIMEOUT=$(yq '.service.health_check.liveness.timeout_seconds // 1' ${{ inputs.config_file }})
                PROBE_FAILURE=$(yq '.service.health_check.liveness.failure_threshold // 3' ${{ inputs.config_file }})
                LIVENESS_PROBE_FLAG="--liveness-probe httpGet.path=$PROBE_PATH,httpGet.port=$PROBE_PORT,initialDelaySeconds=$PROBE_DELAY,periodSeconds=$PROBE_PERIOD,timeoutSeconds=$PROBE_TIMEOUT,failureThreshold=$PROBE_FAILURE"
              fi
              echo "liveness_probe_flag=$LIVENESS_PROBE_FLAG" >> $GITHUB_OUTPUT
            fi

            echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
            echo "memory=$MEMORY" >> $GITHUB_OUTPUT
            echo "cpu=$CPU" >> $GITHUB_OUTPUT
            echo "concurrency=$CONCURRENCY" >> $GITHUB_OUTPUT
            echo "timeout=$TIMEOUT" >> $GITHUB_OUTPUT
            echo "min_instances=$MIN_INSTANCES" >> $GITHUB_OUTPUT
            echo "max_instances=$MAX_INSTANCES" >> $GITHUB_OUTPUT
            echo "allow_unauth=$ALLOW_UNAUTH" >> $GITHUB_OUTPUT
            echo "vpc_connector=$VPC_CONNECTOR" >> $GITHUB_OUTPUT
            echo "env_vars=$ENV_VARS" >> $GITHUB_OUTPUT
            echo "command=$COMMAND" >> $GITHUB_OUTPUT
            echo "args=$ARGS" >> $GITHUB_OUTPUT
            echo "port=$PORT" >> $GITHUB_OUTPUT
            echo "has_config=true" >> $GITHUB_OUTPUT
          else
            echo "Config file not found: ${{ inputs.config_file }}"
            exit 1
          fi

      - name: Set service name
        id: set-service-name
        run: |
          if [ "${{ inputs.config_file != '' }}" == "true" ] && [ "${{ steps.read-config.outputs.has_config }}" == "true" ]; then
            echo "final_service_name=${{ steps.read-config.outputs.service_name }}" >> $GITHUB_OUTPUT
          else
            echo "final_service_name=${{ inputs.service_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Generate deployment flags
        id: generate-flags
        run: |
          FLAGS=""
          
          # Add resource flags if config file is used
          if [ "${{ inputs.config_file != '' }}" == "true" ] && [ "${{ steps.read-config.outputs.has_config }}" == "true" ]; then
            FLAGS="$FLAGS --memory=${{ steps.read-config.outputs.memory }}"
            FLAGS="$FLAGS --cpu=${{ steps.read-config.outputs.cpu }}"
            FLAGS="$FLAGS --concurrency=${{ steps.read-config.outputs.concurrency }}"
            FLAGS="$FLAGS --timeout=${{ steps.read-config.outputs.timeout }}s"
            FLAGS="$FLAGS --min-instances=${{ steps.read-config.outputs.min_instances }}"
            FLAGS="$FLAGS --max-instances=${{ steps.read-config.outputs.max_instances }}"
            
            # Add VPC connector if specified
            if [ "${{ steps.read-config.outputs.vpc_connector }}" != "" ]; then
              FLAGS="$FLAGS --vpc-connector=${{ steps.read-config.outputs.vpc_connector }}"
            fi
            
            # Auth settings from config
            if [ "${{ steps.read-config.outputs.allow_unauth }}" == "true" ]; then
              FLAGS="$FLAGS --allow-unauthenticated"
            fi

            # Add environment variables
            ENV_VARS="${{ steps.read-config.outputs.env_vars }}"
            # Add APP_CONFIG_FILE_B64 if present
            if [ "${{ steps.read-config.outputs.app_config_file_b64 }}" != "" ]; then
              if [ "$ENV_VARS" != "--set-env-vars=" ] && [ "$ENV_VARS" != "" ]; then
                ENV_VARS="$ENV_VARS,APP_CONFIG_FILE_B64=${{ steps.read-config.outputs.app_config_file_b64 }}"
              else
                ENV_VARS="--set-env-vars=APP_CONFIG_FILE_B64=${{ steps.read-config.outputs.app_config_file_b64 }}"
              fi
            fi
            FLAGS="$FLAGS $ENV_VARS"

            # Add custom command and args if present
            if [ "${{ steps.read-config.outputs.command }}" != "" ]; then
              FLAGS="$FLAGS --command=${{ steps.read-config.outputs.command }}"
            fi
            if [ "${{ steps.read-config.outputs.args }}" != "" ]; then
              FLAGS="$FLAGS --args=\"${{ steps.read-config.outputs.args }}\""
            fi
            
            # Add health check probe flags if present
            if [ "${{ steps.read-config.outputs.startup_probe_flag }}" != "" ]; then
              FLAGS="$FLAGS ${{ steps.read-config.outputs.startup_probe_flag }}"
            fi
            if [ "${{ steps.read-config.outputs.liveness_probe_flag }}" != "" ]; then
              FLAGS="$FLAGS ${{ steps.read-config.outputs.liveness_probe_flag }}"
            fi
            
            # Add port flag if specified in config
            if [ "${{ steps.read-config.outputs.port }}" != "" ]; then
              FLAGS="$FLAGS --port=${{ steps.read-config.outputs.port }}"
            fi
            
          else
            # Auth settings from input
            if [ "${{ inputs.allow_unauth }}" == "true" ]; then
              FLAGS="$FLAGS --allow-unauthenticated"
            fi
          fi
          
          echo "flags=$FLAGS" >> $GITHUB_OUTPUT

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ steps.set-service-name.outputs.final_service_name }}
          region: ${{ inputs.region }}
          image: ${{ inputs.image_tag }}
          flags: ${{ steps.generate-flags.outputs.flags }}
          project_id: ${{ inputs.gcp_project_id }}

      - name: Get Cloud Run Service URL
        id: get-url
        run: |
          URL=$(gcloud run services describe ${{ steps.set-service-name.outputs.final_service_name }} --platform managed --project ${{ inputs.gcp_project_id }} --region ${{ inputs.region }} --format 'value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Print GITHUB_OUTPUT file
        if: always()
        run: cat $GITHUB_OUTPUT || true
