name: Reusable TypeScript Checks

on:
  workflow_call:
    inputs:
      disable_linting:
        description: "Disable linting checks"
        required: false
        type: boolean
        default: false
      disable_tests:
        description: "Disable tests"
        required: false
        type: boolean
        default: false
      node_version:
        description: "Node.js version to use"
        required: false
        type: string
        default: "lts/*"
      package_manager:
        description: "Package manager to use (bun or pnpm)"
        required: false
        type: string
        default: "bun"
      bun_version:
        description: "Bun version"
        required: false
        type: string
        default: "1.2.8"
      pnpm_version:
        description: "PNPM version"
        required: false
        type: string
        default: "10.4.1"
      bun_image:
        description: "Docker image to use for bun"
        required: false
        type: string
        default: "oven/bun:{0}-alpine"
      node_image:
        description: "Docker image to use for node/pnpm"
        required: false
        type: string
        default: "node:lts-alpine"
      test_command:
        description: "Test command to run from package.json"
        required: false
        type: string
        default: "test"
      lint_command:
        description: "Lint command to run from package.json"
        required: false
        type: string
        default: "lint"
      format_command:
        description: "Format command to run from package.json"
        required: false
        type: string
        default: "format:check"
      checkout_submodules:
        description: "Checkout submodules"
        required: false
        type: boolean
        default: true
      app_id:
        description: "GitHub App ID"
        required: false
        type: string
        default: ""
      app_pem:
        description: "GitHub App PEM"
        required: false
        type: string
        default: ""
      repositories:
        description: "Additional repositories to access (one per line)"
        required: false
        type: string
        default: ""

jobs:
  checks-ts:
    runs-on: zondax-runners
    container:
      image: ${{ inputs.package_manager == 'bun' && format(inputs.bun_image, inputs.bun_version) || inputs.node_image }}
    timeout-minutes: 15

    env:
      PM: ${{ inputs.package_manager == 'bun' && 'bun' || 'pnpm' }}
      PM_RUN: ${{ inputs.package_manager == 'bun' && 'bun run' || 'pnpm run' }}
      GITHUB_APP_ID: ${{ inputs.app_id }}
      GITHUB_APP_PEM: ${{ inputs.app_pem }}

    steps:
      - name: Install git
        run: apk add --no-cache git

      - name: Generate GitHub App Token
        id: app-token
        if: ${{ inputs.app_id != '' && inputs.app_pem != '' }}
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ env.GITHUB_APP_ID }}
          private-key: ${{ env.GITHUB_APP_PEM }}
          repositories: |
            ${{ github.event.repository.full_name }}
            ${{ inputs.repositories }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
          submodules: ${{ inputs.checkout_submodules }}
          token: ${{ steps.app-token.outputs.token || github.token }}

      - name: Patch git clone
        run: git config --system --add safe.directory '*'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Setup pnpm
        if: ${{ inputs.package_manager == 'pnpm' }}
        uses: pnpm/action-setup@v4
        with:
          version: ${{ inputs.pnpm_version }}

      - name: Install dependencies
        run: ${{ env.PM }} install

      - name: Check format
        run: ${{ env.PM_RUN }} ${{ inputs.format_command }}

      - name: Run lint
        if: ${{ !inputs.disable_linting }}
        run: ${{ env.PM_RUN }} ${{ inputs.lint_command }}

      - name: Run tests
        if: ${{ !inputs.disable_tests }}
        run: ${{ env.PM_RUN }} ${{ inputs.test_command }}
