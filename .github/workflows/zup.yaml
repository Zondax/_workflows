name: Zup

on:
  workflow_call:
    inputs:
      base_branch:
        description: "The branch to create PRs against"
        type: "string"
        required: true
      pr_title:
        description: "PR title"
        type: "string"
        required: true
      pr_label:
        description: "PR label"
        type: "string"
        required: true
      commit_message:
        description: "Commit message"
        type: "string"
        required: true
      pr_body:
        description: "PR body"
        type: "string"
        required: false
        default: "This is an automated PR."
      update_script_path:
        description: "Path to the update script relative to repository root"
        type: "string"
        required: true
    secrets:
      custom_token:
        description: "GitHub token for authentication"
        required: true

jobs:
  update-test:
    runs-on: zondax-runners
    container:
      image: ubuntu:24.04
    env:
      PR_TITLE: "ðŸ¤– ${{ inputs.pr_title }}"
      PR_LABEL: "zup-${{ inputs.pr_label }}"
      BASE_BRANCH: "${{ inputs.base_branch }}"
      BRANCH_PREFIX: "zup-${{ inputs.pr_label }}"
      COMMIT_MESSAGE: "${{ inputs.commit_message}}"
      PR_BODY: "${{ inputs.pr_body }}"
    steps:
      - name: Install Git
        run: |
          apt-get update && apt-get install -y git

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: "${{ secrets.custom_token }}"

      - name: Set up Git
        run: |
          git config --global user.name "Zondax Actions Bot"
          git config --global user.email "actions@zondax.ch"
          git config --global --add safe.directory "$(pwd)"

      - name: Create branch name
        id: branch-name
        run: |
          BRANCH_NAME="${{ env.BRANCH_PREFIX }}-$(date +%Y%m%d)"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Install GitHub CLI
        run: |
          apt-get update
          apt-get install -y gh jq

      - name: Close existing PRs
        if: github.event_name != 'pull_request'
        run: |
          gh auth login --with-token <<< "${{ secrets.custom_token }}"
          # Search for PRs with our specific label
          gh pr list --search "label:${{ env.PR_LABEL }}" --state open --json number,title | \
          jq -r '.[] | .number' | \
          xargs -I {} gh pr close {} --comment "Closing in favor of a new automated PR from the update-test workflow"
        env:
          GH_TOKEN: "${{ secrets.custom_token }}"

      - name: Execute update script
        shell: bash
        run: |
          # Validate script path
          SCRIPT_PATH="${{ inputs.update_script_path }}"
          if [ -z "$SCRIPT_PATH" ]; then
            echo "::error::No update script path provided"
            exit 1
          fi
          
          if [ ! -f "$SCRIPT_PATH" ]; then
            echo "::error::Update script not found at: $SCRIPT_PATH"
            exit 1
          fi
          
          # Make script executable
          chmod +x "$SCRIPT_PATH"
          
          # Execute the script with proper error handling
          echo "Executing update script: $SCRIPT_PATH"
          set -e
          if ! bash "$SCRIPT_PATH"; then
            echo "::error::Update script failed to execute"
            exit 1
          fi
          echo "Update script executed successfully"

      - name: Check for changes
        id: git-check
        run: |
          git add -A  # This is recursive, adds all changes in the repository
          if git diff --staged --quiet; then
            echo "No changes detected in the repository"
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in the repository"
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.git-check.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: "${{ secrets.custom_token }}"
          commit-message: "${{ env.COMMIT_MESSAGE }}"
          title: "${{ env.PR_TITLE }}"
          body: "${{ env.PR_BODY }}"
          branch: ${{ steps.branch-name.outputs.branch_name }}
          base: ${{ env.BASE_BRANCH }}
          delete-branch: true
          labels: ${{ env.PR_LABEL }}
