name: Canary Dashboard (Reusable)

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to analyze'
        required: true
        type: string

jobs:
  dashboard:
    name: Canary Deployment Dashboard
    runs-on: zondax-runners
    environment: ${{ inputs.environment == 'both' && 'dev' || inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Authenticate with GCP
        uses: zondax/actions/gcp-wif-auth@v1
        with:
          workload_identity_provider: ${{ vars.PULUMI_DEPLOY_WIF_PROVIDER }}
          project_id: ${{ vars.PULUMI_GCP_PROJECT_ID }}

      - name: Dashboard Header
        run: |
          echo "================================================"
          echo "üìä CANARY DEPLOYMENT DASHBOARD"
          echo "Generated: $(date)"
          echo "Environment: ${{ inputs.environment }}"
          echo "================================================"

      - name: Analyze Dev Environment
        if: inputs.environment == 'dev' || inputs.environment == 'both'
        run: |
          echo ""
          echo "üîß DEV ENVIRONMENT STATUS"
          echo "Project: ${{ vars.PULUMI_GCP_PROJECT_ID }}"
          echo "----------------------------------------"
          
          # Check each service
          for service_type in api store api-relay; do
            service_name="${service_type}-dev"
            echo ""
            echo "üî∏ SERVICE: $service_name"
            
            # Check if service exists
            if gcloud run services describe "$service_name" \
              --region=${{ vars.PULUMI_GAR_LOCATION }} \
              --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
              --quiet >/dev/null 2>&1; then
              
              # Get current status
              CURRENT_URL=$(gcloud run services describe "$service_name" \
                --region=${{ vars.PULUMI_GAR_LOCATION }} \
                --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
                --format='value(status.url)')
              
              REVISION_COUNT=$(gcloud run revisions list \
                --service="$service_name" \
                --region=${{ vars.PULUMI_GAR_LOCATION }} \
                --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
                --format='value(metadata.name)' | wc -l)
              
              # Check canary status
              STABLE_TAG=$(gcloud run services describe "$service_name" \
                --region=${{ vars.PULUMI_GAR_LOCATION }} \
                --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
                --format='value(spec.traffic[].tag)' | grep "stable" || echo "")
              
              CANARY_TAG=$(gcloud run services describe "$service_name" \
                --region=${{ vars.PULUMI_GAR_LOCATION }} \
                --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
                --format='value(spec.traffic[].tag)' | grep "canary" || echo "")
              
              echo "   ‚úÖ Status: DEPLOYED"
              echo "   üîó URL: $CURRENT_URL"
              echo "   üî¢ Revisions: $REVISION_COUNT"
              
              # Show all container images
              echo "   üê≥ Containers:"
              gcloud run services describe "$service_name" \
                --region=${{ vars.PULUMI_GAR_LOCATION }} \
                --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
                --format='value(spec.template.spec.containers[].name,spec.template.spec.containers[].image)' | \
                paste -d' ' - - | while read -r container_name container_image; do
                if [ -n "$container_name" ] && [ -n "$container_image" ]; then
                  # Extract commit info if it's from our registry
                  if echo "$container_image" | grep -q "${{ vars.PULUMI_GAR_LOCATION }}-docker.pkg.dev/${{ vars.PULUMI_GCP_PROJECT_ID }}"; then
                    IMAGE_TAG=$(echo "$container_image" | sed 's/.*://')
                    COMMIT_SHA=$(echo "$IMAGE_TAG" | sed 's/^sha-//')
                    if [ ${#COMMIT_SHA} -eq 40 ] || [ ${#COMMIT_SHA} -eq 7 ]; then
                      echo "      üì¶ $container_name: $IMAGE_TAG (üìù $COMMIT_SHA)"
                    else
                      echo "      üì¶ $container_name: $IMAGE_TAG"
                    fi
                  else
                    # External image (like Envoy)
                    echo "      üì¶ $container_name: $(echo "$container_image" | sed 's/.*\///')"
                  fi
                fi
              done
              
              if [ -n "$CANARY_TAG" ]; then
                echo "   üöÄ Canary: ACTIVE"
                # Show traffic split
                echo "   üìä Traffic:"
                gcloud run services describe "$service_name" \
                  --region=${{ vars.PULUMI_GAR_LOCATION }} \
                  --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
                  --format='table[no-heading](spec.traffic[].percent,spec.traffic[].tag)' | \
                  sed 's/^/      /'
              elif [ -n "$STABLE_TAG" ]; then
                echo "   ‚úÖ Canary: Ready"
              else
                echo "   ‚ö†Ô∏è  Canary: Not ready"
              fi
              
              # Get latest available image
              LATEST_AVAILABLE=$(gcloud artifacts docker images list \
                ${{ vars.PULUMI_GAR_LOCATION }}-docker.pkg.dev/${{ vars.PULUMI_GCP_PROJECT_ID }}/${{ vars.PULUMI_GAR_REPOSITORY }}/$service_type \
                --sort-by="~CREATE_TIME" \
                --limit="1" \
                --format='value(IMAGE)' 2>/dev/null | grep -o 'sha-[a-f0-9]*' || echo "none")
              
              if [ "$CURRENT_TAG" != "$LATEST_AVAILABLE" ] && [ "$LATEST_AVAILABLE" != "none" ]; then
                echo "   üÜï Available: $LATEST_AVAILABLE (newer than current)"
              else
                echo "   ‚úÖ Up to date"
              fi
              
            else
              echo "   ‚ùå Status: NOT DEPLOYED"
              echo "   üí° Tip: Deploy normally first, then use canary workflows"
            fi
          done

      - name: Analyze Production Environment
        if: inputs.environment == 'pro' || inputs.environment == 'both'
        env:
          PULUMI_GCP_PROJECT_ID_PRO: ${{ inputs.environment == 'pro' && vars.PULUMI_GCP_PROJECT_ID || 'ks-pro-52f3fd4' }}
        run: |
          echo ""
          echo "üè≠ PRODUCTION ENVIRONMENT STATUS"
          echo "Project: $PULUMI_GCP_PROJECT_ID_PRO"
          echo "----------------------------------------"
          
          # Check each service
          for service_type in api store api-relay; do
            service_name="${service_type}-main"
            echo ""
            echo "üî∏ SERVICE: $service_name"
            
            # Check if service exists
            if gcloud run services describe "$service_name" \
              --region=${{ vars.PULUMI_GAR_LOCATION }} \
              --project="$PULUMI_GCP_PROJECT_ID_PRO" \
              --quiet >/dev/null 2>&1; then
              
              # Get current status
              CURRENT_URL=$(gcloud run services describe "$service_name" \
                --region=${{ vars.PULUMI_GAR_LOCATION }} \
                --project="$PULUMI_GCP_PROJECT_ID_PRO" \
                --format='value(status.url)')
              
              REVISION_COUNT=$(gcloud run revisions list \
                --service="$service_name" \
                --region=${{ vars.PULUMI_GAR_LOCATION }} \
                --project="$PULUMI_GCP_PROJECT_ID_PRO" \
                --format='value(metadata.name)' | wc -l)
              
              # Check canary status
              STABLE_TAG=$(gcloud run services describe "$service_name" \
                --region=${{ vars.PULUMI_GAR_LOCATION }} \
                --project="$PULUMI_GCP_PROJECT_ID_PRO" \
                --format='value(spec.traffic[].tag)' | grep "stable" || echo "")
              
              CANARY_TAG=$(gcloud run services describe "$service_name" \
                --region=${{ vars.PULUMI_GAR_LOCATION }} \
                --project="$PULUMI_GCP_PROJECT_ID_PRO" \
                --format='value(spec.traffic[].tag)' | grep "canary" || echo "")
              
              echo "   ‚úÖ Status: DEPLOYED"
              echo "   üîó URL: $CURRENT_URL"
              echo "   üî¢ Revisions: $REVISION_COUNT"
              
              # Show all container images
              echo "   üê≥ Containers:"
              gcloud run services describe "$service_name" \
                --region=${{ vars.PULUMI_GAR_LOCATION }} \
                --project="$PULUMI_GCP_PROJECT_ID_PRO" \
                --format='value(spec.template.spec.containers[].name,spec.template.spec.containers[].image)' | \
                paste -d' ' - - | while read -r container_name container_image; do
                if [ -n "$container_name" ] && [ -n "$container_image" ]; then
                  # Extract commit info if it's from our registry
                  if echo "$container_image" | grep -q "${{ vars.PULUMI_GAR_LOCATION }}-docker.pkg.dev/${{ vars.PULUMI_GCP_PROJECT_ID }}"; then
                    IMAGE_TAG=$(echo "$container_image" | sed 's/.*://')
                    COMMIT_SHA=$(echo "$IMAGE_TAG" | sed 's/^sha-//')
                    if [ ${#COMMIT_SHA} -eq 40 ] || [ ${#COMMIT_SHA} -eq 7 ]; then
                      echo "      üì¶ $container_name: $IMAGE_TAG (üìù $COMMIT_SHA)"
                    else
                      echo "      üì¶ $container_name: $IMAGE_TAG"
                    fi
                  else
                    # External image (like Envoy)
                    echo "      üì¶ $container_name: $(echo "$container_image" | sed 's/.*\///')"
                  fi
                fi
              done
              
              if [ -n "$CANARY_TAG" ]; then
                echo "   üöÄ Canary: ACTIVE ‚ö†Ô∏è"
                # Show traffic split
                echo "   üìä Traffic:"
                gcloud run services describe "$service_name" \
                  --region=${{ vars.PULUMI_GAR_LOCATION }} \
                  --project="$PULUMI_GCP_PROJECT_ID_PRO" \
                  --format='table[no-heading](spec.traffic[].percent,spec.traffic[].tag)' | \
                  sed 's/^/      /'
                echo "   üí° Use ‚¨ÜÔ∏è Promote or üö® Rollback workflows"
              elif [ -n "$STABLE_TAG" ]; then
                echo "   ‚úÖ Canary: Ready for deployment"
              else
                echo "   ‚ö†Ô∏è  Canary: Not ready (no stable tag)"
              fi
              
            else
              echo "   ‚ùå Status: NOT DEPLOYED"
              echo "   üí° Tip: Deploy normally first, then use canary workflows"
            fi
          done

      - name: Generate Action Plan
        run: |
          echo ""
          echo "================================================"
          echo "üéØ RECOMMENDED ACTIONS"
          echo "================================================"
          echo ""
          echo "üìã INFORMATION WORKFLOWS:"
          echo "   üìã List Cloud Run Services - See detailed service status"
          echo "   üê≥ List Docker Images - See available image tags"
          echo "   üìä Canary Dashboard - This comprehensive overview"
          echo ""
          echo "üöÄ DEPLOYMENT WORKFLOWS:"
          echo "   üöÄ Deploy Canary - Start canary deployment (10% traffic)"
          echo "   ‚¨ÜÔ∏è Promote Canary - Increase canary traffic gradually"
          echo "   ‚úÖ Finalize Canary - Complete deployment (100% traffic)"
          echo "   üö® Rollback Canary - Emergency recovery to stable"
          echo ""
          echo "üí° TYPICAL WORKFLOW:"
          echo "   1. Run üìä Dashboard ‚Üí See current status"
          echo "   2. Run üê≥ List Images ‚Üí Find latest image tag"
          echo "   3. Run üöÄ Deploy Canary ‚Üí Start with 10%"
          echo "   4. Monitor & run ‚¨ÜÔ∏è Promote ‚Üí 25% ‚Üí 50% ‚Üí 75%"
          echo "   5. Run ‚úÖ Finalize ‚Üí Complete deployment"
          echo ""
          echo "üö® IF ISSUES DETECTED:"
          echo "   1. Run üö® Rollback Canary immediately"
          echo "   2. Fix issues in code"
          echo "   3. Start process again with corrected version"
          echo ""
          
          # Check for any active canaries
          ACTIVE_CANARIES=0
          
          # Count dev canaries
          if [ "${{ inputs.environment }}" = "dev" ] || [ "${{ inputs.environment }}" = "both" ]; then
            for service_type in api store api-relay; do
              service_name="${service_type}-dev"
              if gcloud run services describe "$service_name" \
                --region=${{ vars.PULUMI_GAR_LOCATION }} \
                --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
                --quiet >/dev/null 2>&1; then
                
                CANARY_CHECK=$(gcloud run services describe "$service_name" \
                  --region=${{ vars.PULUMI_GAR_LOCATION }} \
                  --project=${{ vars.PULUMI_GCP_PROJECT_ID }} \
                  --format='value(spec.traffic[].tag)' | grep "canary" || echo "")
                
                if [ -n "$CANARY_CHECK" ]; then
                  ACTIVE_CANARIES=$((ACTIVE_CANARIES + 1))
                fi
              fi
            done
          fi
          
          # Count production canaries (simplified for example)
          if [ "${{ inputs.environment }}" = "pro" ] || [ "${{ inputs.environment }}" = "both" ]; then
            # Add production canary checking logic here if needed
            echo "‚ö†Ô∏è  Remember: Production canaries require extra attention!"
          fi
          
          if [ $ACTIVE_CANARIES -gt 0 ]; then
            echo "üö® ACTIVE CANARIES DETECTED: $ACTIVE_CANARIES"
            echo "   Please review and take action on active canary deployments"
          else
            echo "‚úÖ No active canaries detected - all services stable"
          fi