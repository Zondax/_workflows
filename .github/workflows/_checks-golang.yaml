name: Reusable Checks golang

on:
  workflow_call:
    inputs:
      package_path:
        description: "Path to the Go package relative to the repository root"
        type: string
        default: "."
      go_version:
        description: "Go version to use"
        type: string
        default: "1.24"
      runner:
        description: "GitHub runner to use"
        type: string
        default: "zondax-runners"
      github_app_auth:
        description: "Use GitHub App Token"
        required: false
        type: boolean
        default: false
      github_app_repos:
        description: "Additional repositories to access (one per line)"
        required: false
        type: string
        default: ""
      enable_coverage:
        description: "Enable coverage checks and reporting"
        required: false
        type: boolean
        default: true
      coverage_threshold:
        description: "Minimum coverage percentage required"
        required: false
        type: number
        default: 75

jobs:
  checks:
    runs-on: ${{ inputs.runner }}
    container:
      image: golang:${{ inputs.go_version }}
      options: --tty
    timeout-minutes: 15

    steps:
      - name: Generate GitHub App Token
        id: app-token
        if: inputs.github_app_auth != false
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.app_id }}
          private-key: ${{ secrets.app_pem }}
          repositories: |
            ${{ inputs.github_app_repos }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ steps.app-token.outputs.token || github.token }}

      - name: Build
        run: |
          git config --global --add safe.directory "*"
          cd ${{ inputs.package_path }}
          make go-build

      - name: ModTidy check
        run: |
          cd ${{ inputs.package_path }}
          make go-mod-check

      - name: Lint check
        run: |
          cd ${{ inputs.package_path }}
          make go-lint-install
          make go-lint

      - name: Run tests
        run: |
          cd ${{ inputs.package_path }}
          make go-test

      - name: Run coverage
        if: inputs.enable_coverage
        run: |
          cd ${{ inputs.package_path }}
          make go-coverage

      - name: Quality Gate - Test coverage shall be above threshold
        if: inputs.enable_coverage
        env:
          TESTCOVERAGE_THRESHOLD: ${{ inputs.coverage_threshold }}
        run: |
          cd ${{ inputs.package_path }}
          echo "üîç Quality Gate: Test Coverage Check"
          echo "Threshold: $TESTCOVERAGE_THRESHOLD%"
          echo "----------------------------------------"
          
          # Extract coverage percentage from profile.cov
          if [ ! -f "profile.cov" ]; then
            echo "‚ùå Coverage file not found: profile.cov"
            exit 1
          fi
          
          # Get total coverage percentage
          total_line=$(go tool cover -func=profile.cov | grep "total:")
          if [ -z "$total_line" ]; then
            echo "‚ùå Could not find total coverage in profile.cov"
            exit 1
          fi
          
          coverage=$(echo "$total_line" | awk '{print $3}' | sed 's/%//')
          echo "Current coverage: ${coverage}%"
          
          # Validate coverage is a number
          if ! [[ "$coverage" =~ ^[0-9]+\.?[0-9]*$ ]]; then
            echo "‚ùå Invalid coverage value: $coverage"
            exit 1
          fi
          
          # Compare using awk for reliable float comparison
          result=$(awk -v cov="$coverage" -v thresh="$TESTCOVERAGE_THRESHOLD" 'BEGIN {print (cov >= thresh)}')
          
          if [ "$result" = "1" ]; then
            echo "‚úÖ Coverage check PASSED (${coverage}% >= ${TESTCOVERAGE_THRESHOLD}%)"
          else
            echo "‚ùå Coverage check FAILED (${coverage}% < ${TESTCOVERAGE_THRESHOLD}%)"
            echo ""
            echo "üí° To fix this:"
            echo "   ‚Ä¢ Add more unit tests to increase coverage"
            echo "   ‚Ä¢ Focus on untested critical paths"
            echo "   ‚Ä¢ Or adjust threshold if current coverage is acceptable"
            exit 1
          fi
