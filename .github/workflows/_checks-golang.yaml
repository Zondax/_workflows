name: Reusable Checks golang

on:
  workflow_call:
    inputs:
      package_path:
        description: "Path to the Go package relative to the repository root"
        type: string
        default: "."
      go_version:
        description: "Go version to use"
        type: string
        default: "1.24"
      runner:
        description: "GitHub runner to use"
        type: string
        default: "zondax-runners"
      github_app_auth:
        description: "Use GitHub App Token"
        required: false
        type: boolean
        default: false
      github_app_repos:
        description: "Additional repositories to access (one per line)"
        required: false
        type: string
        default: ""
      enable_coverage:
        description: "Enable coverage checks and reporting"
        required: false
        type: boolean
        default: true
      upload_coverage:
        description: "Upload coverage report as artifact"
        required: false
        type: boolean
        default: true
      coverage_threshold:
        description: "Minimum coverage percentage required"
        required: false
        type: number
        default: 75
      post_pr_comment:
        description: "Post coverage results as PR comment"
        required: false
        type: boolean
        default: true
      goprivate:
        description: "Comma-separated list of module path prefixes for GOPRIVATE"
        required: false
        type: string
        default: ""
    secrets:
      app_id:
        description: "GitHub App ID"
        required: false
      app_pem:
        description: "GitHub App PEM"
        required: false

permissions:
  contents: read
  pull-requests: write

jobs:
  checks:
    runs-on: ${{ inputs.runner }}
    container:
      image: golang:${{ inputs.go_version }}
      options: --tty
    timeout-minutes: 15
    outputs:
      coverage_percentage: ${{ steps.coverage-check.outputs.coverage_percentage }}
      coverage_status: ${{ steps.coverage-check.outputs.coverage_status }}
      coverage_message: ${{ steps.coverage-check.outputs.coverage_message }}

    steps:
      - name: Checkout with GitHub App
        id: checkout
        uses: zondax/_actions/checkout-with-app@main
        with:
          github_app_auth: ${{ inputs.github_app_auth }}
          github_app_repos: ${{ inputs.github_app_repos }}
          checkout_submodules: true
          app_id: ${{ secrets.app_id }}
          app_pem: ${{ secrets.app_pem }}

      - name: Configure Git for private repos
        if: inputs.github_app_auth
        run: |
          git config --local url."https://x-access-token:${{ steps.checkout.outputs.token }}@github.com/".insteadOf "https://github.com/"
          
      - name: Configure Go private modules
        if: inputs.goprivate != ''
        run: |
          echo "GOPRIVATE=${{ inputs.goprivate }}" >> $GITHUB_ENV

      - name: Build
        run: |
          cd ${{ inputs.package_path }}
          make go-build

      - name: ModTidy check
        run: |
          cd ${{ inputs.package_path }}
          make go-mod-check

      - name: Lint check
        run: |
          cd ${{ inputs.package_path }}
          make go-lint-install
          make go-lint

      - name: Run tests
        run: |
          cd ${{ inputs.package_path }}
          make go-test

      - name: Run coverage
        if: inputs.enable_coverage
        run: |
          cd ${{ inputs.package_path }}
          make go-coverage

      - name: Upload coverage report
        if: inputs.upload_coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.run_number }}
          path: ${{ inputs.package_path }}/profile.cov
          retention-days: 30

      - name: Quality Gate - Test coverage shall be above threshold
        if: inputs.enable_coverage
        id: coverage-check
        shell: bash
        env:
          TESTCOVERAGE_THRESHOLD: ${{ inputs.coverage_threshold }}
        run: |
          cd ${{ inputs.package_path }}
          echo "🔍 Quality Gate: Test Coverage Check"
          echo "Threshold: $TESTCOVERAGE_THRESHOLD%"
          echo "----------------------------------------"
          
          # Extract coverage percentage from profile.cov
          if [ ! -f "profile.cov" ]; then
            echo "❌ Coverage file not found: profile.cov"
            echo "coverage_status=error" >> $GITHUB_OUTPUT
            echo "coverage_message=Coverage file not found: profile.cov" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Get total coverage percentage
          total_line=$(go tool cover -func=profile.cov | grep "total:")
          if [ -z "$total_line" ]; then
            echo "❌ Could not find total coverage in profile.cov"
            echo "coverage_status=error" >> $GITHUB_OUTPUT
            echo "coverage_message=Could not find total coverage in profile.cov" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          coverage=$(echo "$total_line" | awk '{print $3}' | sed 's/%//')
          echo "Current coverage: ${coverage}%"
          echo "coverage_percentage=$coverage" >> $GITHUB_OUTPUT
          
          # Validate coverage is a number using bash regex
          if ! [[ "$coverage" =~ ^[0-9]+\.?[0-9]*$ ]]; then
            echo "❌ Invalid coverage value: $coverage"
            echo "coverage_status=error" >> $GITHUB_OUTPUT
            echo "coverage_message=Invalid coverage value: $coverage" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Compare using awk for reliable float comparison
          result=$(awk -v cov="$coverage" -v thresh="$TESTCOVERAGE_THRESHOLD" 'BEGIN {print (cov >= thresh)}')
          
          if [ "$result" = "1" ]; then
            echo "✅ Coverage check PASSED (${coverage}% >= ${TESTCOVERAGE_THRESHOLD}%)"
            echo "coverage_status=passed" >> $GITHUB_OUTPUT
            echo "coverage_message=Coverage check PASSED (${coverage}% >= ${TESTCOVERAGE_THRESHOLD}%)" >> $GITHUB_OUTPUT
          else
            echo "❌ Coverage check FAILED (${coverage}% < ${TESTCOVERAGE_THRESHOLD}%)"
            echo ""
            echo "💡 To fix this:"
            echo "   • Add more unit tests to increase coverage"
            echo "   • Focus on untested critical paths"
            echo "   • Or adjust threshold if current coverage is acceptable"
            echo "coverage_status=failed" >> $GITHUB_OUTPUT
            echo "coverage_message=Coverage check FAILED (${coverage}% < ${TESTCOVERAGE_THRESHOLD}%)" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Fail workflow if coverage check failed
        if: inputs.enable_coverage && steps.coverage-check.outputs.coverage_status == 'failed'
        run: |
          echo "❌ Workflow failed due to insufficient test coverage"
          echo "Coverage: ${{ steps.coverage-check.outputs.coverage_percentage }}%"
          echo "Required: ${{ inputs.coverage_threshold }}%"
          exit 1

  post-coverage-comment:
    needs: checks
    if: inputs.enable_coverage && inputs.post_pr_comment && (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') && always() && needs.checks.outputs.coverage_status != ''
    uses: ./.github/workflows/_post-pr-comment-reusable.yml
    secrets: inherit
    with:
      issue_number: ${{ github.event.number }}
      comment_identifier: "coverage-report"
      comment_body: |
        ## ${{ needs.checks.outputs.coverage_status == 'passed' && '✅' || needs.checks.outputs.coverage_status == 'failed' && '❌' || '⚠️' }} Test Coverage Report
        
        | Metric | Value |
        |--------|-------|
        | **Current Coverage** | ${{ needs.checks.outputs.coverage_percentage }}% |
        | **Required Threshold** | ${{ inputs.coverage_threshold }}% |
        | **Status** | **${{ needs.checks.outputs.coverage_status == 'passed' && 'PASSED' || needs.checks.outputs.coverage_status == 'failed' && 'FAILED' || 'ERROR' }}** |
        
        ${{ needs.checks.outputs.coverage_status == 'failed' && '
        ### 💡 How to improve coverage:
        - Add more unit tests to increase coverage
        - Focus on untested critical paths
        - Consider adjusting threshold if current coverage is acceptable
        ' || '' }}
        
        ---
