name: List Docker Images (Reusable)

on:
  workflow_call:
    inputs:
      service:
        description: 'Service to list images for'
        required: true
        type: string
      environment:
        description: 'Environment context (affects which registry to check)'
        required: true
        type: string
      limit:
        description: 'Number of recent images to show per service'
        required: false
        type: string
        default: '10'

jobs:
  list-images:
    name: List Docker Images
    runs-on: zondax-runners
    environment: ${{ inputs.environment == 'both' && 'dev' || inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Authenticate with GCP
        uses: zondax/actions/gcp-wif-auth@v1
        with:
          workload_identity_provider: ${{ vars.PULUMI_DEPLOY_WIF_PROVIDER }}
          project_id: ${{ vars.PULUMI_GCP_PROJECT_ID }}

      - name: List API Images
        if: inputs.service == 'api' || inputs.service == 'all'
        run: |
          echo "================================================"
          echo "üî∏ API SERVICE DOCKER IMAGES"
          echo "Registry: ${{ vars.PULUMI_GAR_LOCATION }}-docker.pkg.dev/${{ vars.PULUMI_GCP_PROJECT_ID }}/${{ vars.PULUMI_GAR_REPOSITORY }}"
          echo "================================================"
          
          echo "üìã Recent API images (limit: ${{ inputs.limit }}):"
          if gcloud artifacts docker tags list \
            ${{ vars.PULUMI_GAR_LOCATION }}-docker.pkg.dev/${{ vars.PULUMI_GCP_PROJECT_ID }}/${{ vars.PULUMI_GAR_REPOSITORY }}/api \
            --sort-by="~CREATE_TIME" \
            --limit="${{ inputs.limit }}" \
            --format='table(
              TAG:label="üè∑Ô∏è  TAG",
              IMAGE:label="üê≥ IMAGE",
              CREATE_TIME.date():label="üìÖ CREATED"
            )' 2>/dev/null; then
            
            echo ""
            echo "üìù COMMIT INFORMATION:"
            # Extract commit info from tags  
            gcloud artifacts docker tags list \
              ${{ vars.PULUMI_GAR_LOCATION }}-docker.pkg.dev/${{ vars.PULUMI_GCP_PROJECT_ID }}/${{ vars.PULUMI_GAR_REPOSITORY }}/api \
              --sort-by="~CREATE_TIME" \
              --limit="${{ inputs.limit }}" \
              --format='value(TAG)' 2>/dev/null | while read -r tag; do
              if [ -n "$tag" ]; then
                # GitHub SHA is 40 characters long (full SHA from build workflow)
                if echo "$tag" | grep -q '^[a-f0-9]\{40\}$'; then
                  SHORT_SHA=$(echo "$tag" | cut -c1-8)
                  echo "   üîó $tag (üìù commit: $SHORT_SHA)"
                elif echo "$tag" | grep -q '^sha-'; then
                  COMMIT_SHA=$(echo "$tag" | sed 's/^sha-//')
                  echo "   üîó $tag (üìù commit: $COMMIT_SHA)"
                else
                  echo "   üîó $tag"
                fi
              fi
            done
            
            echo ""
            echo "üí° USAGE EXAMPLES:"
            echo "   üöÄ Deploy Canary: Use the commit SHA tag from above"
            echo "   Example: Copy the full SHA after üîó (e.g., abc123def456...)"
          else
            echo "‚ö†Ô∏è  No API images found or repository doesn't exist yet"
            echo "üí° Images will appear here after the first successful build"
          fi
          echo ""

      - name: List Store Images
        if: inputs.service == 'store' || inputs.service == 'all'
        run: |
          echo "================================================"
          echo "üî∏ STORE SERVICE DOCKER IMAGES"
          echo "Registry: ${{ vars.PULUMI_GAR_LOCATION }}-docker.pkg.dev/${{ vars.PULUMI_GCP_PROJECT_ID }}/${{ vars.PULUMI_GAR_REPOSITORY }}"
          echo "================================================"
          
          echo "üìã Recent Store images (limit: ${{ inputs.limit }}):"
          if gcloud artifacts docker tags list \
            ${{ vars.PULUMI_GAR_LOCATION }}-docker.pkg.dev/${{ vars.PULUMI_GCP_PROJECT_ID }}/${{ vars.PULUMI_GAR_REPOSITORY }}/store \
            --sort-by="~CREATE_TIME" \
            --limit="${{ inputs.limit }}" \
            --format='table(
              TAG:label="üè∑Ô∏è  TAG",
              IMAGE:label="üê≥ IMAGE",
              CREATE_TIME.date():label="üìÖ CREATED"
            )' 2>/dev/null; then
            
            echo ""
            echo "üìù COMMIT INFORMATION:"
            # Extract commit info from tags  
            gcloud artifacts docker tags list \
              ${{ vars.PULUMI_GAR_LOCATION }}-docker.pkg.dev/${{ vars.PULUMI_GCP_PROJECT_ID }}/${{ vars.PULUMI_GAR_REPOSITORY }}/store \
              --sort-by="~CREATE_TIME" \
              --limit="${{ inputs.limit }}" \
              --format='value(TAG)' 2>/dev/null | while read -r tag; do
              if [ -n "$tag" ]; then
                # GitHub SHA is 40 characters long (full SHA from build workflow)
                if echo "$tag" | grep -q '^[a-f0-9]\{40\}$'; then
                  SHORT_SHA=$(echo "$tag" | cut -c1-8)
                  echo "   üîó $tag (üìù commit: $SHORT_SHA)"
                elif echo "$tag" | grep -q '^sha-'; then
                  COMMIT_SHA=$(echo "$tag" | sed 's/^sha-//')
                  echo "   üîó $tag (üìù commit: $COMMIT_SHA)"
                else
                  echo "   üîó $tag"
                fi
              fi
            done
            
            echo ""
            echo "üí° USAGE EXAMPLES:"
            echo "   üöÄ Deploy Canary: Use the commit SHA tag from above"
            echo "   Example: Copy the full SHA after üîó (e.g., xyz789abc123...)"
          else
            echo "‚ö†Ô∏è  No Store images found or repository doesn't exist yet"
            echo "üí° Images will appear here after the first successful build"
          fi
          echo ""

      - name: List API Relay Images
        if: inputs.service == 'api-relay' || inputs.service == 'all'
        run: |
          echo "================================================"
          echo "üî∏ API-RELAY SERVICE DOCKER IMAGES"
          echo "Registry: ${{ vars.PULUMI_GAR_LOCATION }}-docker.pkg.dev/${{ vars.PULUMI_GCP_PROJECT_ID }}/${{ vars.PULUMI_GAR_REPOSITORY }}"
          echo "================================================"
          
          echo "üìã Recent API-Relay images (limit: ${{ inputs.limit }}):"
          if gcloud artifacts docker tags list \
            ${{ vars.PULUMI_GAR_LOCATION }}-docker.pkg.dev/${{ vars.PULUMI_GCP_PROJECT_ID }}/${{ vars.PULUMI_GAR_REPOSITORY }}/api-relay \
            --sort-by="~CREATE_TIME" \
            --limit="${{ inputs.limit }}" \
            --format='table(
              TAG:label="üè∑Ô∏è  TAG",
              IMAGE:label="üê≥ IMAGE",
              CREATE_TIME.date():label="üìÖ CREATED"
            )' 2>/dev/null; then
            
            echo ""
            echo "üìù COMMIT INFORMATION:"
            # Extract commit info from tags  
            gcloud artifacts docker tags list \
              ${{ vars.PULUMI_GAR_LOCATION }}-docker.pkg.dev/${{ vars.PULUMI_GCP_PROJECT_ID }}/${{ vars.PULUMI_GAR_REPOSITORY }}/api-relay \
              --sort-by="~CREATE_TIME" \
              --limit="${{ inputs.limit }}" \
              --format='value(TAG)' 2>/dev/null | while read -r tag; do
              if [ -n "$tag" ]; then
                # GitHub SHA is 40 characters long (full SHA from build workflow)
                if echo "$tag" | grep -q '^[a-f0-9]\{40\}$'; then
                  SHORT_SHA=$(echo "$tag" | cut -c1-8)
                  echo "   üîó $tag (üìù commit: $SHORT_SHA)"
                elif echo "$tag" | grep -q '^sha-'; then
                  COMMIT_SHA=$(echo "$tag" | sed 's/^sha-//')
                  echo "   üîó $tag (üìù commit: $COMMIT_SHA)"
                else
                  echo "   üîó $tag"
                fi
              fi
            done
            
            echo ""
            echo "üí° USAGE EXAMPLES:"
            echo "   üöÄ Deploy Canary: Use the commit SHA tag from above"
            echo "   Example: Copy the full SHA after üîó (e.g., def456abc789...)"
          else
            echo "‚ö†Ô∏è  No API-Relay images found or repository doesn't exist yet"
            echo "üí° Images will appear here after the first successful build"
          fi
          echo ""

      - name: Show Recent Builds Summary
        run: |
          echo "================================================"
          echo "üìä RECENT BUILDS SUMMARY"
          echo "================================================"
          
          echo "üîç Finding most recent images across all services..."
          
          # Get most recent image for each service
          echo ""
          echo "üïí LATEST IMAGES BY SERVICE:"
          
          for service in api store api-relay; do
            echo "üî∏ $service:"
            LATEST_IMAGE=$(gcloud artifacts docker images list \
              ${{ vars.PULUMI_GAR_LOCATION }}-docker.pkg.dev/${{ vars.PULUMI_GCP_PROJECT_ID }}/${{ vars.PULUMI_GAR_REPOSITORY }}/$service \
              --sort-by="~CREATE_TIME" \
              --limit="1" \
              --format='value(IMAGE)' 2>/dev/null || echo "")
            
            if [ -n "$LATEST_IMAGE" ]; then
              # Extract the full tag and commit SHA
              IMAGE_TAG=$(echo "$LATEST_IMAGE" | sed 's/.*://')
              COMMIT_SHA=$(echo "$IMAGE_TAG" | sed 's/^sha-//')
              CREATED=$(gcloud artifacts docker images list \
                ${{ vars.PULUMI_GAR_LOCATION }}-docker.pkg.dev/${{ vars.PULUMI_GCP_PROJECT_ID }}/${{ vars.PULUMI_GAR_REPOSITORY }}/$service \
                --sort-by="~CREATE_TIME" \
                --limit="1" \
                --format='value(CREATE_TIME.date())' 2>/dev/null || echo "Unknown")
              
              echo "   üè∑Ô∏è  Tag: $IMAGE_TAG"
              if [ ${#COMMIT_SHA} -eq 40 ] || [ ${#COMMIT_SHA} -eq 7 ]; then
                echo "   üîó Commit: $COMMIT_SHA"
              fi
              echo "   üìÖ Created: $CREATED"
            else
              echo "   ‚ö†Ô∏è  No images found"
            fi
            echo ""
          done

      - name: Generate Usage Instructions
        run: |
          echo "================================================"
          echo "üéØ CANARY DEPLOYMENT USAGE"
          echo "================================================"
          echo ""
          echo "üìù HOW TO USE THESE IMAGES:"
          echo ""
          echo "1Ô∏è‚É£  COPY THE IMAGE TAG:"
          echo "   - Use the SHA tag (e.g., sha-abc123)"
          echo "   - Or use the full image URL"
          echo ""
          echo "2Ô∏è‚É£  DEPLOY CANARY:"
          echo "   - Go to Actions ‚Üí üöÄ Deploy Canary"
          echo "   - Paste the image tag in 'Image Tag' field"
          echo "   - Select service and environment"
          echo "   - Start with 10% traffic"
          echo ""
          echo "3Ô∏è‚É£  PROMOTE GRADUALLY:"
          echo "   - Monitor for 10-30 minutes"
          echo "   - Use ‚¨ÜÔ∏è Promote Canary: 10% ‚Üí 25% ‚Üí 50% ‚Üí 75%"
          echo "   - Use ‚úÖ Finalize Canary for 100%"
          echo ""
          echo "üö® EMERGENCY ROLLBACK:"
          echo "   - Use üö® Rollback Canary if issues detected"
          echo "   - Returns to stable version in ~30 seconds"
          echo ""
          echo "üí° TIP: Use 'List Cloud Run Services' to see current deployments"
          echo ""
          echo "üîó RELATED WORKFLOWS:"
          echo "   - üìã List Cloud Run Services (see current state)"
          echo "   - üöÄ Deploy Canary (start deployment)"
          echo "   - ‚¨ÜÔ∏è Promote Canary (increase traffic)"
          echo "   - ‚úÖ Finalize Canary (complete deployment)"
          echo "   - üö® Rollback Canary (emergency recovery)"